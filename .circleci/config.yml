# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  deploy:
    type: boolean
    default: false

commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing else to do for forked PRs, so marking this step successful"
              circleci-agent step halt
            fi

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:8.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - run:
          name: Generate Javadocs
          command: |
            cd mega-spark-diff
            mvn javadoc:javadoc
      - run:
          name: Generate Scaladocs
          command: |
            cd mega-spark-diff
            mvn scala:doc
      - early_return_for_forked_pull_requests
      - persist_to_workspace:
          root: mega-spark-diff/target/site
          paths:
            - apidocs
            - scaladocs
      - run:
          name: Scan
          command: bash <(curl -s https://copilot.blackducksoftware.com/ci/circle2/scripts/upload)
  deploy:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:8.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Import GPG key
          command: |
            GPG_TTY=$(tty)
            echo -e "$GPG_KEY_NEWLINE" | gpg --batch --import
      - run:
          name: Deploy
          command: mvn -B -Pmavencentral clean deploy --settings .circleci/settings.xml
      - run:
          name: Generate Javadocs
          command: |
            cd mega-spark-diff
            mvn javadoc:javadoc
      - run:
          name: Generate Scaladocs
          command: |
            cd mega-spark-diff
            mvn scala:doc
      - early_return_for_forked_pull_requests
      - persist_to_workspace:
          root: mega-spark-diff/target/site
          paths:
            - apidocs
            - scaladocs
      - run:
          name: Scan
          command: bash <(curl -s https://copilot.blackducksoftware.com/ci/circle2/scripts/upload)
  docs-deploy:
    docker:
      - image: cimg/openjdk:8.0
    steps:
      - run:
          name: add known_hosts
          command: |
            mkdir ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
            ' >> ~/.ssh/known_hosts
      - run:
          name: Checkout main
          command: |
            git clone $CIRCLE_REPOSITORY_URL --depth 1 -b main main
            cd main
            git config --global user.email "$(git log --format=%ae -n 1)"
            git config --global user.name "$(git log --format=%an -n 1)"
            echo "export msg="\"$(git log --format=%B -n 1)\" >> $BASH_ENV
      - run:
          name: Checkout gh-pages
          command: |
            git clone $CIRCLE_REPOSITORY_URL --depth 1 -b gh-pages gh-pages
            rm -rf gh-pages/apidocs
            rm -rf gh-pages/scaladocs
      - attach_workspace:
          at: gh-pages
      - run:
          name: Copy CircleCI config
          command: |
            mkdir -p gh-pages/.circleci
            cp main/.circleci/config.yml gh-pages/.circleci/config.yml
      - add_ssh_keys:
          fingerprints:
            - "08:56:e3:f6:88:8d:30:f7:c3:df:dc:23:9c:91:eb:5f"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            cd gh-pages
            git add .circleci/config.yml
            git add -A -- apidocs/
            git add -A -- scaladocs/
            git commit -am "$msg"
            git push origin gh-pages

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  maven_test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    when:
        equal: [ false, <<pipeline.parameters.deploy>> ]
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: gh-pages
      - docs-deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only: main

  maven_deploy:
    when:
      equal: [ true, <<pipeline.parameters.deploy>> ]
    jobs:
      - deploy
      - docs-deploy:
          requires:
            - deploy
          filters:
            branches:
              only: main